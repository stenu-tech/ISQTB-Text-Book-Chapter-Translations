1.1.1 Test Objectives

The typical test objectives are:

Evaluating work products such as requirements, user stories, designs, and code
Triggering failures and finding defets
Ensuring required coverage of a test objectivesReducing the level of risk of inadequate software quality
Verifying that a test object complies with contractual, legal, and regulatory requirements
Providing information to stakeholder to allow them to make informed decisions
Building confidence in the quality of the test object
Validating whether the test objet is complete and works as expected by the stakeholders

Objectives of testing can vary, dependin upon the context, which includes the work product being tested, the test levels, risks, the software development lifecycle (SDLC) being followed, and factors related to the business context, e.g., corporate structure, competetive considerations, or time to market

1.1.2 Testing and Debugging

Testing and debugging are sepeate activities. Testing can trigger failures that are caused by defects in the software (dynamic testing) or can directly find defects in the test object (static testing).

When dynamic testing triggers a failure, debugging is concerned with finding causes of this failure(defects), analyzing these acuses, and eliminating them. The typical debugging process in this cases involves:

Reproduction of a failure
Diagnosis (finding the root cause)
Fixing the cause

Subsequent confirmation testing checks whether the fixes resolved the problem. Preferably, confirmation testing is done by the same person who performed the initial test. Subsequent regression testing can also be performed, to check whether the fixes are causing failures in other parts of the test objects.

When static testing identifies a defect, debugging is concered with removit it. There is no need for reproduction or diagnosis, since testing directly finds defects and cannot cause failures.

1.2 Why is Testing Necessary?

Testing provides a cost-effective means of detecting defects. These defects can then be removed by debugging - a non-testing activity), so testing indirectly contributes to higher quality test objects.

Testing provides a means of directly evaluating the quality of a test object at various stages in the SDLC.
These measures are used as part of a larger project management activity, contributing to decisions to move to the next stage of the SDLC, such as the release decision.

Testing provides users with indirect representation on the development project. Testers ensure that their understanding of users' needs are considered throughout the development lifecycle. The alternative is to involve a representative set of users as part of the development project, which is not usually possible due to the high costs and lack of availability of suitable users.

Testing may also be required to meet contractual or legal requirements, or to comply with regulatory standards.

1.2.2 Testing and Quality Assurance (QA)

While people often use the terms "testig" and "quality assurance" (QA) interchangeably, testing and QA are not the same. Testing is a form of quality control (QC)

QC is a product-oriented, corrective approach that focuses on those activities supporting the achievement of appropriate levels of quality. Testing is a major form of quality control, while others include formal methods (model checking and proof of correctness), simulation and prototyping.

QA is a process-oriented, preventive approach that focuses on the implementation and improvement of processes. It works on the basis that if a good process is followed correctly, then it will generate a good product. QA applies to both the development and testing processes, and is the responsibility of everyone on a project.

Test results are used by QA and QC. In QC they are used to fix defect, while in QA they provide feedback on how well the development and test processes are performing.

1.3 Testing Principles

A number of testing principles offering general guidelines applicable to all testing have been suggested over the years. This syllabus describes seven such principles.

1. Testing shows the presence, not the absence of defects. Testing can show that defects are present in the test object, but cannot prove that there are no defects. Testing reduces the probability of defects remaining undiscovered in the test object, but even if no defects are found, testing cannot prove test object correctness.

2. Exhaustive testing is impossible. Testing everything is not feasible except in trivial cases. Rather than attempting to test exhaustively, test techniques, test case prioritization, and risk-based testing should be used to focus test efforts.

3. Early testing saves time and money.