1.5.3 Independence of Testing

A cetain degree of indepdence makes the tester more effective at finding defects due to differences between the author's and the testers's cognitive biases. Indepedence is not, however, a replacement for familiarity, e.g. developers can efficiently find many defects in their own code.

Work products can be tested by their author (no independence), by the author's peers from the same team (some independence), by testers from outside the author's team but within the organization (high indepedence), or by testers from outside the organization (very high independence). For most projects, it is usually best to carry out testing with multiple levels of independence (e.g. developers performing component and component integration testing, test team performing system and system integraton testing, and business representatives performing acceptance testing).

The main benefit of independence of testing is independent testers are likely to recognize different kinds of failures and defects compared to developers because of their different backgrounds, technical perspectives and biases. Moreover, an independant tester can verify, challenge, or disprove assumptions made by stakeholders during specification and implementation of the system.

However, there are also some drawbacks. Indepedent testers may be isolated from the development team, which may lead to a lack of collaboration, communication problems, or an adversarial relationship with the development team. Developers may lose a sense of responsibility for quality. Indepedent testers may be seen as a bottleneck or be blamed for delays in release.

2.1 Testing in the context of a software Development Lifecycle

A software development lifecycle (SDLC) is an abstract, high-level representation of the software development process. A SDLC model defines how different development phases and types of activities performed within this porcess related to each other, both logically and chronologically. Examples of SDLC models include: sequential development models (e.g. waterfall model, V-model), iterative development models (e.g. spiral model, prototyping), and incremental development models (e.g. Unified Process).

Some activities within software development processes can also be described by more detailed software development methods and Agile practices. Examples include: acceptance test-driven development (ATDD), behavior-driven development (BDD), domain-driven design (DDD), extreme programming (XD), feature-driven development (FDD), Kanban, Lean, Scrum, and test-driven development (TDD).

2.1.1 Impact of the Software Development Lifecycle on Testing

Testing must be adapted to the SDLC to succeed. The choice of the SDLC impacts on the:
1. Scope and timing of test activities (e.g. test levels and test types)
Level of detail of test documentation
Choice of test techniques and test approach
Extent of test automation
Role and responsibilities of tester

In sequential development models, in the initial phases testers typically participate in requirement reviews, test analysis, and test design. The executable code is usually created in the later phases, so typically dynamic testing cannot be performed early in the SDLC.

In some iterative and incremental development models, it is assumed that each iteration delivers a working prototype or product increment. This implies that in eac iteration both static and dynamic testing may be performed at all test levels. Frequent delivery of increments requires fast feedback and extensive regression testing.
Agile software development assumes that change may occur throughout the project. Therefore, lightweight work product documentation and extensive test automation to make regression testing easier are favored in agile projects. Also, most of the manual testing tends to be done using experience-based test techniques that do not require extensive prior test analysis and design.

2.1.2 Software Development Lifecycle and Good Testing Practices

Good testing practices, indepedenent of the chosen SDLC model, include the following:

For every software development activity, there is a corresponding test acitvity, so that all development activities are subject to quality control
Different test levels have specific and different test activity, so that all development activities are subject to quality control.
Different test levels have specific and different test objectives, which allows for testing to be appropriately comprehensive while avoiding redundancy
Test analysis and design for a given test level begins during the corresponding development phase of the SDLC, so that testing can adhere to the principle of early testing.
Testers are involved in reviewiing work products as soon as drafts of this documentation are available, so that this earlier testing and defect detection can support the shift-left strategy.

2.1.3 Testing as a Driver for Software Development

TDD, ATDD and BDD are similar development approaches, where tests are defined as a means of directing development. Each of these approaches implemets the principle of early testing and follows a shift-left approach, since the tests are defined before the code is written. They support an iterative development model. These approaches are characterized as follows:

Test-Driven Development (TDD):
Directs the coding through test cases (instead of extensive software design)
Tests are written first, then the code is written to satisfy the tests, and then the tests and code are refactored
Acceptance Test-Driven Development (ATDD)
Derives tests from acceptance crteria as part of the system design process
Tests are written before the part of the application is developed to satisfy the tests
Behavior-Driven Development (BDD)
Expresses the desired behavior of an application with test cases written in a simple form of natural language, which is easy to understand by stakeholders - usually using the Given/When/Then format.
Tests cases are then automatically translated into executable tests

For all the above approaches, tests may persist as automated tests to ensure the code quality in future adaptions / refactoring.

2.1.4 DevOps and Testing

DevOps is an organizational approach aiming to create synergy by getting development (including testing) and operations to work together to achieve a set of common goals. DevOps requires a cultural shift within an organization to bridge the gaps between development (including testing) and operations while treating their functions with equal value. DevOps promotes team autonomy, fast feedback, integrated toolchains, and tehnical practices like continuous integration (CI) and continuous delivery (CD). This enables the teams to build, test and release high-quality code faster through a DevOps delivery pipeline.

From the testing perspective, some of the benefits of DevOps are:
Fast feedback on the code quality, and whteher changes adversely affect existing ccode
CI promotes a shift-left approach in testing by encouraging developres to submit high quality code accompanied by component tests and static analysis
Promotes automated processes like CI/CD that facilitate establishing stable test environments
Increases the view on non-functional quality characteristic (e.g. performance, reliability)

Automation through a delivery pipeline reduces the need for repetitive manual testing
The risk in regression is minimized due to the scale and range of automated regression tests

DevOps is not without its risks and challenges, which include:
The DevOps delivery pipeline must be defined and established
CI / CD tools must be introduced and maintained.
Test automation required additional resources and may be difficult to establish and maintain.

Although DevOps comes with a high level of automated testing, manual testing - especially from the user's perspective - will still be needed.

2.1.5 Shift-Left Approach
The principle of early testing is sometimes referred to as shift-left because it is an approach where testing is performed earlier in the SDLC. Shift-left normally suggests that testing should be done earlier (e.g., not waiting for code to be implemented or for components to be integrated), but it does not mean that testing later in the SDLC should be neglected.

There are some good practices that illustrate how to achieve a shift-left in testing, which include:

Reviwing the specification from the perspective of testing. These review activities on specifications often find potential defects, such as ambiguities, incompleteness, and inconsistencies.
Writing test cases before the code is written and have the code run in a test harness during code implementation
Using CI and even better CD as it comes with a fast feedback and automated component tests to accompany source cod when it is submitted to the code repository
Completing static analysis of source code prior to dynamic testing, or as part of an automated process

Performing non-functional testing starting at the component test level, where possible. This is a form of shift-left as these non-functional test types tend to be performed later in the SDLC when a complete system and a representative test environment are available

A shift-left approach might result in extra trainging, effort and/or costs earlier in the process but is expected to save efforts and/or costs later in the process.

For the shift-left approach it is important that stakeholders are convinced and bought into this concept.

2.1.6 Ret